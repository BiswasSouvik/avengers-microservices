# Application Config
server.port = 8080
spring.application.name = hero-service

# Spring DB String
spring.datasource.url=jdbc:mysql://localhost:3306/marvel?createDatabaseIfNotExist=true&useUnicode=yes&characterEncoding=UTF-8

# Username and password
spring.datasource.username=support
#spring.datasource.password=Adrenaline.me@1996
spring.datasource.password=ENC(7vjAjFDV6R2wZ/XBOkWBEDOcsgEVu6IxSOA7Bv12BDE=)

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Eureka Configs
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone =  http://localhost:8761/eureka/
eureka.instance.hostname = localhost

# OAuth2.0 Details
security.oauth2.resource.token-info-uri = http://localhost:8662/authorization-api/oauth/check_token
security.oauth2.resource.client.client-id = hero
security.oauth2.resource.client.client-secret = pin